{"version":3,"sources":["views/Users/User.js"],"names":["User","props","componentDidMount","user_id","Axios","get","then","r","console","log","data","password","user","setState","first_name","last_name","company_name","email","state","loading","password2","match","params","_id","parseInt","this","history","push","e","target","value","url","id","post","swal","title","icon","buttons","confirm","text","visible","className","closeModal","catch","md","lg","xl","type","placeholder","onChange","onFirstNameChange","onLastNameChange","onCompanyNameChange","autoComplete","onEmailChange","name","onPasswordChange","onPassword2Change","color","block","onClick","onTapRegister","role","aria-hidden","Component"],"mappings":"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","file":"static/js/41.82f2cbfe.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n    // CBadge,\r\n    CButton,\r\n    // CButtonGroup,\r\n    CCard,\r\n    CCardBody,\r\n    // CCardFooter,\r\n    CCardHeader,\r\n    CCol,\r\n    // CProgress,\r\n    CRow,\r\n    // CCallout\r\n} from '@coreui/react'\r\nimport {\r\n    CCardFooter,\r\n    CContainer,\r\n    CForm,\r\n    CInput,\r\n    CInputGroup,\r\n    CInputGroupPrepend,\r\n    CInputGroupText,\r\n} from '@coreui/react'\r\n\r\nimport CIcon from '@coreui/icons-react'\r\nimport \"grapesjs/src/styles/scss/main.scss\";\r\nimport 'grapesjs/dist/css/grapes.min.css';\r\n\r\n// import grapesjs from 'grapesjs';\r\n// import { Editor } from 'grapesjs-react';\r\n\r\nimport Axios from '../../lib/api';\r\n\r\nimport swal from 'sweetalert';\r\n\r\nclass User extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: false,\r\n            first_name: '',\r\n            last_name: '',\r\n            company_name: '',\r\n\r\n            email: '',\r\n            password: '',\r\n            password2: '',\r\n            // id: null\r\n        }\r\n        var user_id = props.match.params._id;\r\n        if (parseInt(user_id) > 0) this.user_id = user_id;\r\n        console.log(this.user_id, props)\r\n    }\r\n    componentDidMount = () => {\r\n        if (this.user_id)\r\n            Axios.get(`admin/users/${this.user_id}`).then(r => {\r\n                console.log(r.data.data[0])\r\n                delete r.data.data[0].password\r\n                var user = r.data.data[0];\r\n                this.setState({\r\n                    first_name: user.first_name || '',\r\n                    last_name: user.last_name || '',\r\n                    company_name: user.company_name || '',\r\n                    email: user.email || '',\r\n                    // id: user.id,\r\n                })\r\n            })\r\n    }\r\n    onBack() {\r\n        this.props.history.push('/dashboard');\r\n    }\r\n\r\n    onFirstNameChange(e) {\r\n        this.setState({ first_name: e.target.value })\r\n    }\r\n\r\n    onLastNameChange(e) {\r\n        this.setState({ last_name: e.target.value })\r\n    }\r\n\r\n    onCompanyNameChange(e) {\r\n        this.setState({ company_name: e.target.value })\r\n    }\r\n\r\n    onEmailChange(e) {\r\n        this.setState({ email: e.target.value })\r\n    }\r\n    onPasswordChange(e) {\r\n        this.setState({ password: e.target.value })\r\n    }\r\n    onPassword2Change(e) {\r\n        this.setState({ password2: e.target.value })\r\n    }\r\n    onTapRegister() {\r\n        this.setState({ loading: true })\r\n        var data = this.state;\r\n        var url = 'users/signup';\r\n        if (this.user_id) {\r\n            url = 'users/user-info';\r\n            data.id = this.user_id\r\n        }\r\n\r\n\r\n        Axios.post(url, data).then(r => {\r\n            console.log(r.data)\r\n            swal({\r\n                title: data.id == null ? \"Successfully created.\" : \"Successfully updated.\",\r\n                // text: \"Check your email\",\r\n                icon: \"success\",\r\n                buttons: {\r\n                    confirm: {\r\n                        text: \"OK\",\r\n                        value: true,\r\n                        visible: true,\r\n                        className: \"\",\r\n                        closeModal: true\r\n                    },\r\n                }\r\n\r\n            }).then(() => {\r\n                this.props.history.push('/admin/users/');\r\n            })\r\n\r\n            this.setState({ loading: false })\r\n        })\r\n            .catch(e => {\r\n                console.log(e)\r\n                this.setState({ loading: false })\r\n            })\r\n    }\r\n    render() {\r\n        var { loading, password, password2 } = this.state;\r\n        return (\r\n            <>\r\n                <CRow>\r\n                    <CCol>\r\n                        <CCard>\r\n                            <CCardHeader>{this.user_id ? 'Edit User' : 'New User'}</CCardHeader>\r\n                            <CCardBody>\r\n                                <CContainer>\r\n                                    <CRow className=\"justify-content-center\">\r\n                                        <CCol md=\"9\" lg=\"7\" xl=\"6\">\r\n                                            <CCard className=\"mx-4\">\r\n                                                <CCardBody className=\"p-4\">\r\n                                                    <CForm>\r\n                                                        {/* <h1>Register</h1> */}\r\n                                                        {/* <p className=\"text-muted\">Create New account</p> */}\r\n                                                        <CInputGroup className=\"mb-3\">\r\n                                                            <CInputGroupPrepend>\r\n                                                                <CInputGroupText>@</CInputGroupText>\r\n                                                            </CInputGroupPrepend>\r\n                                                            <CInput type=\"text\" placeholder=\"First Name\" value={this.state.first_name} onChange={(e) => this.onFirstNameChange(e)} />\r\n                                                        </CInputGroup>\r\n\r\n                                                        <CInputGroup className=\"mb-3\">\r\n                                                            <CInputGroupPrepend>\r\n                                                                <CInputGroupText>@</CInputGroupText>\r\n                                                            </CInputGroupPrepend>\r\n                                                            <CInput type=\"text\" placeholder=\"Last Name\" value={this.state.last_name} onChange={(e) => this.onLastNameChange(e)} />\r\n                                                        </CInputGroup>\r\n                                                        <CInputGroup className=\"mb-3\">\r\n                                                            <CInputGroupPrepend>\r\n                                                                <CInputGroupText>@</CInputGroupText>\r\n                                                            </CInputGroupPrepend>\r\n                                                            <CInput type=\"text\" placeholder=\"Company Name\" value={this.state.company_name} onChange={(e) => this.onCompanyNameChange(e)} />\r\n                                                        </CInputGroup>\r\n\r\n                                                        <CInputGroup className=\"mb-3\">\r\n                                                            <CInputGroupPrepend>\r\n                                                                <CInputGroupText>@</CInputGroupText>\r\n                                                            </CInputGroupPrepend>\r\n                                                            <CInput type=\"text\" placeholder=\"Email\" autoComplete=\"email\" value={this.state.email} onChange={(e) => this.onEmailChange(e)} />\r\n                                                        </CInputGroup>\r\n\r\n                                                        <CInputGroup className=\"mb-3\">\r\n                                                            <CInputGroupPrepend>\r\n                                                                <CInputGroupText>\r\n                                                                    <CIcon name=\"cil-lock-locked\" />\r\n                                                                </CInputGroupText>\r\n                                                            </CInputGroupPrepend>\r\n                                                            <CInput type=\"password\" placeholder=\"Password\" autoComplete=\"new-password\" value={this.state.password} onChange={(e) => this.onPasswordChange(e)} />\r\n                                                        </CInputGroup>\r\n                                                        <CInputGroup className=\"mb-4\">\r\n                                                            <CInputGroupPrepend>\r\n                                                                <CInputGroupText>\r\n                                                                    <CIcon name=\"cil-lock-locked\" />\r\n                                                                </CInputGroupText>\r\n                                                            </CInputGroupPrepend>\r\n                                                            <CInput type=\"password\" placeholder=\"Repeat password\" autoComplete=\"new-password\" value={this.state.password2} onChange={(e) => this.onPassword2Change(e)} />\r\n                                                        </CInputGroup>\r\n                                                        <CButton color=\"success\" block onClick={() => { this.onTapRegister(); }}>{this.user_id ? 'Update Account' : 'Create Account'}\r\n                                                            {loading && <span className=\"spinner-border spinner-border-sm ml-1\" role=\"status\" aria-hidden=\"true\"></span>}\r\n                                                        </CButton>\r\n                                                    </CForm>\r\n                                                </CCardBody>\r\n                                                {/* <CCardFooter className=\"p-4\">\r\n                <CRow>\r\n                  <CCol xs=\"12\" sm=\"6\">\r\n                    <CButton className=\"btn-facebook mb-1\" block><span>facebook</span></CButton>\r\n                  </CCol>\r\n                  <CCol xs=\"12\" sm=\"6\">\r\n                    <CButton className=\"btn-twitter mb-1\" block><span>twitter</span></CButton>\r\n                  </CCol>\r\n                </CRow>\r\n              </CCardFooter> */}\r\n                                            </CCard>\r\n                                        </CCol>\r\n                                    </CRow>\r\n                                </CContainer>\r\n\r\n\r\n                            </CCardBody>\r\n                        </CCard>\r\n                    </CCol>\r\n                </CRow>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default User\r\n"],"sourceRoot":""}