{"version":3,"sources":["views/Users/User.js"],"names":["User","props","componentDidMount","user_id","Axios","get","then","r","console","log","setState","page","data","state","loading","email","password","password2","match","params","_id","parseInt","this","history","push","e","target","value","post","swal","title","text","icon","buttons","confirm","visible","className","closeModal","catch","md","lg","xl","type","placeholder","autoComplete","onChange","onEmailChange","name","onPasswordChange","onPassword2Change","color","block","onClick","onTapRegister","role","aria-hidden","Component"],"mappings":"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","file":"static/js/41.d7ae4d8a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n    // CBadge,\r\n    CButton,\r\n    // CButtonGroup,\r\n    CCard,\r\n    CCardBody,\r\n    // CCardFooter,\r\n    CCardHeader,\r\n    CCol,\r\n    // CProgress,\r\n    CRow,\r\n    // CCallout\r\n} from '@coreui/react'\r\nimport {\r\n    CCardFooter,\r\n    CContainer,\r\n    CForm,\r\n    CInput,\r\n    CInputGroup,\r\n    CInputGroupPrepend,\r\n    CInputGroupText,\r\n} from '@coreui/react'\r\n\r\nimport CIcon from '@coreui/icons-react'\r\nimport \"grapesjs/src/styles/scss/main.scss\";\r\nimport 'grapesjs/dist/css/grapes.min.css';\r\n\r\n// import grapesjs from 'grapesjs';\r\n// import { Editor } from 'grapesjs-react';\r\n\r\nimport Axios from '../../lib/api';\r\n\r\nimport swal from 'sweetalert';\r\n\r\nclass User extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: false,\r\n            email: '',\r\n            password: '',\r\n            password2: '',\r\n        }\r\n        var user_id = props.match.params._id;\r\n        if (parseInt(user_id) > 0) this.user_id = user_id;\r\n        console.log(this.user_id)\r\n    }\r\n    componentDidMount = () => {\r\n        if (this.user_id)\r\n            Axios.get(`admin/users/${this.user_id}`).then(r => {\r\n                console.log(r)\r\n                this.setState({ page: r.data.data[0] })\r\n            })\r\n    }\r\n    onBack() {\r\n        this.props.history.push('/dashboard');\r\n    }\r\n\r\n    onEmailChange(e) {\r\n        this.setState({ email: e.target.value })\r\n    }\r\n    onPasswordChange(e) {\r\n        this.setState({ password: e.target.value })\r\n    }\r\n    onPassword2Change(e) {\r\n        this.setState({ password2: e.target.value })\r\n    }\r\n    onTapRegister() {\r\n\r\n\r\n        this.setState({ loading: true })\r\n        var { email, password } = this.state;\r\n        Axios.post('users/signup', { email: email, password: password, password2: password }).then(r => {\r\n            console.log(r.data)\r\n            swal({\r\n                title: \"Successfully created.\",\r\n                text: \"Check your email\",\r\n                icon: \"success\",\r\n                buttons: {\r\n                    confirm: {\r\n                        text: \"OK\",\r\n                        value: true,\r\n                        visible: true,\r\n                        className: \"\",\r\n                        closeModal: true\r\n                    },\r\n                }\r\n\r\n            }).then(() => {\r\n                this.props.history.push('/admin/users/');\r\n            })\r\n\r\n            this.setState({ loading: false })\r\n        })\r\n            .catch(e => {\r\n                console.log(e)\r\n                this.setState({ loading: false })\r\n            })\r\n    }\r\n    render() {\r\n        var { loading, password, password2 } = this.state;\r\n        return (\r\n            <>\r\n                <CRow>\r\n                    <CCol>\r\n                        <CCard>\r\n                            <CCardHeader>{this.user_id ? 'Edit User' : 'New User'}</CCardHeader>\r\n                            <CCardBody>\r\n                                <CContainer>\r\n                                    <CRow className=\"justify-content-center\">\r\n                                        <CCol md=\"9\" lg=\"7\" xl=\"6\">\r\n                                            <CCard className=\"mx-4\">\r\n                                                <CCardBody className=\"p-4\">\r\n                                                    <CForm>\r\n                                                        {/* <h1>Register</h1> */}\r\n                                                        {/* <p className=\"text-muted\">Create New account</p> */}\r\n                                                        <CInputGroup className=\"mb-3\">\r\n                                                            <CInputGroupPrepend>\r\n                                                                <CInputGroupText>@</CInputGroupText>\r\n                                                            </CInputGroupPrepend>\r\n                                                            <CInput type=\"text\" placeholder=\"Email\" autoComplete=\"email\" value={this.state.email} onChange={(e) => this.onEmailChange(e)} />\r\n                                                        </CInputGroup>\r\n                                                        <CInputGroup className=\"mb-3\">\r\n                                                            <CInputGroupPrepend>\r\n                                                                <CInputGroupText>\r\n                                                                    <CIcon name=\"cil-lock-locked\" />\r\n                                                                </CInputGroupText>\r\n                                                            </CInputGroupPrepend>\r\n                                                            <CInput type=\"password\" placeholder=\"Password\" autoComplete=\"new-password\" value={this.state.password} onChange={(e) => this.onPasswordChange(e)} />\r\n                                                        </CInputGroup>\r\n                                                        <CInputGroup className=\"mb-4\">\r\n                                                            <CInputGroupPrepend>\r\n                                                                <CInputGroupText>\r\n                                                                    <CIcon name=\"cil-lock-locked\" />\r\n                                                                </CInputGroupText>\r\n                                                            </CInputGroupPrepend>\r\n                                                            <CInput type=\"password\" placeholder=\"Repeat password\" autoComplete=\"new-password\" value={this.state.password2} onChange={(e) => this.onPassword2Change(e)} />\r\n                                                        </CInputGroup>\r\n                                                        <CButton color=\"success\" block onClick={() => { this.onTapRegister(); }}>Create Account\r\n                     {loading && <span className=\"spinner-border spinner-border-sm ml-1\" role=\"status\" aria-hidden=\"true\"></span>}\r\n                                                        </CButton>\r\n                                                    </CForm>\r\n                                                </CCardBody>\r\n                                                {/* <CCardFooter className=\"p-4\">\r\n                <CRow>\r\n                  <CCol xs=\"12\" sm=\"6\">\r\n                    <CButton className=\"btn-facebook mb-1\" block><span>facebook</span></CButton>\r\n                  </CCol>\r\n                  <CCol xs=\"12\" sm=\"6\">\r\n                    <CButton className=\"btn-twitter mb-1\" block><span>twitter</span></CButton>\r\n                  </CCol>\r\n                </CRow>\r\n              </CCardFooter> */}\r\n                                            </CCard>\r\n                                        </CCol>\r\n                                    </CRow>\r\n                                </CContainer>\r\n\r\n\r\n                            </CCardBody>\r\n                        </CCard>\r\n                    </CCol>\r\n                </CRow>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default User\r\n"],"sourceRoot":""}