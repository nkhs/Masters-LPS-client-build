{"version":3,"sources":["views/dashboard/Dashboard.js"],"names":["Dashboard","lazy","props","componentDidMount","Axios","get","then","r","console","log","setState","list","data","state","id","this","history","push","item","swal","title","text","icon","buttons","dangerMode","willDelete","delete","filter","page","JSON","parse","stringify","post","e","type","size","color","onClick","name","className","map","date","moment","Date","createdAt","format","key","onView","onEdit","onDelete","onDuplicate","Component"],"mappings":"2RAwBMA,GAJkBC,gBAAK,kBAAM,uDACdA,gBAAK,kBAAM,uD,kDAI9B,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAKRC,kBAAoB,WAClBC,IAAMC,IAAI,oBAAoBC,MAAK,SAAAC,GACjCC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEC,KAAMJ,EAAEK,WAP1B,EAAKC,MAAQ,CACXF,KAAM,IAHS,E,mDAYZG,GACLC,KAAKb,MAAMc,QAAQC,KAAnB,sBAAuCH,M,6BAElCA,GACLC,KAAKb,MAAMc,QAAQC,KAAnB,sBAAuCH,M,+BAEhCI,GAAO,IAAD,OACbC,IAAK,CACHC,MAAO,gBACPC,KAAM,2DACNC,KAAM,UACNC,SAAS,EACTC,YAAY,IAEXlB,MAAK,SAAAmB,GACAA,GACFrB,IAAMsB,OAAN,0BAAgCR,EAAKJ,KAAMR,MAAK,SAAAC,GAC9CC,QAAQC,IAAIF,GADuC,IAE7CI,EAAS,EAAKE,MAAdF,KACNA,EAAOA,EAAKgB,QAAO,SAAAC,GAAI,OAAIA,EAAKd,KAAOI,EAAKJ,MAC5C,EAAKJ,SAAS,CAAEC,KAAMA,Y,kCAKpBO,GAAO,IAAD,OAChB,WACEA,EAAOW,KAAKC,MAAMD,KAAKE,UAAUb,KACrBJ,GACZV,IAAM4B,KAAK,iBAAkBd,GAAMZ,MAAK,SAAAC,GACtCC,QAAQC,IAAIF,GACZ,EAAKL,MAAMc,QAAQC,KAAnB,sBAAuCV,EAAEK,KAAKE,QAEhD,MAAOmB,GACPzB,QAAQC,IAAIwB,M,+BAGN,IAAD,OACDtB,EAASI,KAAKF,MAAdF,KACN,OACE,oCACE,kBAAC,KAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,kBAGA,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAASuB,KAAK,SAASC,KAAK,KAAKC,MAAM,UAAUC,QAAS,WAAQ,EAAKnC,MAAMc,QAAQC,KAAK,gBAAkB,kBAAC,IAAD,CAAOqB,KAAK,iBAAxH,QAEA,6BAEA,2BAAOC,UAAU,0DACf,2BAAOA,UAAU,eACf,4BACE,oCACA,wBAAIA,UAAU,cAAd,UAGJ,+BACG5B,EAAK6B,KAAI,SAAAZ,GACR,IAAIa,EAAOC,EAAO,IAAIC,KAAKf,EAAKgB,YAAYC,OAAO,gBACnD,OAAO,wBAAIC,IAAKlB,EAAKd,IAEnB,4BACE,6BAAMc,EAAKR,OACX,yBAAKmB,UAAU,oBACb,qCADF,kBACkCE,IAIpC,wBAAIF,UAAU,cACZ,4BAAQA,UAAU,wBAAwBF,QAAS,kBAAM,EAAKU,OAAOnB,EAAKd,MAA1E,QACA,4BAAQyB,UAAU,wBAAwBF,QAAS,kBAAM,EAAKW,OAAOpB,EAAKd,MAA1E,QACA,4BAAQyB,UAAU,uBAAuBF,QAAS,kBAAM,EAAKY,SAASrB,KAAtE,UACA,4BAAQW,UAAU,qBAAqBF,QAAS,kBAAM,EAAKa,YAAYtB,KAAvE,6B,GAzFFuB,cA2GTnD","file":"static/js/44.f4de0fc6.chunk.js","sourcesContent":["import React, { lazy, Component } from 'react'\nimport {\n  CBadge,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CCallout\n} from '@coreui/react'\nimport swal from 'sweetalert';\nimport CIcon from '@coreui/icons-react'\n\nimport * as moment from 'moment'\nimport Axios from '../../lib/api';\n\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\nconst WidgetsBrand = lazy(() => import('../widgets/WidgetsBrand.js'))\n\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: []\n    }\n  }\n  componentDidMount = () => {\n    Axios.get('admin/page/pages').then(r => {\n      console.log(r)\n      this.setState({ list: r.data })\n    })\n  }\n  onView(id) {\n    this.props.history.push(`/admin/view/${id}`);\n  }\n  onEdit(id) {\n    this.props.history.push(`/admin/edit/${id}`);\n  }\n  onDelete(item) {\n    swal({\n      title: \"Are you sure?\",\n      text: \"Once deleted, you will not be able to recover this page!\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true,\n    })\n      .then(willDelete => {\n        if (willDelete)\n          Axios.delete(`admin/page/page/${item.id}`).then(r => {\n            console.log(r)\n            var { list } = this.state;\n            list = list.filter(page => page.id !== item.id);\n            this.setState({ list: list })\n          })\n      })\n\n  }\n  onDuplicate(item) {\n    try {\n      item = JSON.parse(JSON.stringify(item))\n      delete item.id\n      Axios.post('admin/add-page', item).then(r => {\n        console.log(r)\n        this.props.history.push(`/admin/edit/${r.data.id}`);\n      })\n    } catch (e) {\n      console.log(e)\n    }\n  }\n  render() {\n    var { list } = this.state;\n    return (\n      <>\n        <CRow>\n          <CCol>\n            <CCard>\n              <CCardHeader>\n                Page List\n              </CCardHeader>\n              <CCardBody>\n\n                <CButton type=\"submit\" size=\"sm\" color=\"warning\" onClick={() => { this.props.history.push('/admin/new'); }}><CIcon name=\"cil-scrubber\" /> Add</CButton>\n\n                <br />\n\n                <table className=\"table table-hover table-outline mb-0 d-none d-sm-table\">\n                  <thead className=\"thead-light\">\n                    <tr>\n                      <th>Name</th>\n                      <th className=\"text-right\">View</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {list.map(page => {\n                      var date = moment(new Date(page.createdAt)).format('DD MMMM YYYY')\n                      return <tr key={page.id}>\n\n                        <td>\n                          <div>{page.title}</div>\n                          <div className=\"small text-muted\">\n                            <span>New</span> | Registered: {date}\n                          </div>\n                        </td>\n\n                        <td className=\"text-right\">\n                          <button className=\"small btn btn-success\" onClick={() => this.onView(page.id)}>View</button>\n                          <button className=\"small btn btn-primary\" onClick={() => this.onEdit(page.id)}>Edit</button>\n                          <button className=\"small btn btn-danger\" onClick={() => this.onDelete(page)}>Delete</button>\n                          <button className=\"small btn btn-info\" onClick={() => this.onDuplicate(page)}>Duplicate</button>\n                        </td>\n                      </tr>\n\n                    })}\n\n                  </tbody>\n                </table>\n\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </>\n    )\n  }\n}\n\nexport default Dashboard\n"],"sourceRoot":""}